Cu.import("resource://testing-common/httpd.js");

var httpserver = new HttpServer();
var index = 0;
var tests = [
  {url: "/test/cexz1",
   flags: CL_EXPECT_GZIP,
   ce: "xz",
   body: [
     0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x04, 0xe6, 0xd6, 0xb4, 0x46,
     0x02, 0x00, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00, 0x74, 0x2f, 0xe5, 0xa3,
     0x01, 0x00, 0x0d, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74,
     0x65, 0x73, 0x74, 0x31, 0x0a, 0x00, 0x00, 0x00, 0xc6, 0x2e, 0x8c, 0x6f,
     0xc4, 0xd7, 0xbe, 0xd6, 0x00, 0x01, 0x26, 0x0e, 0x08, 0x1b, 0xe0, 0x04,
     0x1f, 0xb6, 0xf3, 0x7d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x59, 0x5a
   ],
   datalen: 14 // the data length of the uncompressed document
  },

  {url: "/test/cexz2",
   flags: CL_EXPECT_GZIP,
   ce: "xz, xz",
   body: [
     0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x04, 0xe6, 0xd6, 0xb4, 0x46,
     0x02, 0x00, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00, 0x74, 0x2f, 0xe5, 0xa3,
     0x01, 0x00, 0x47, 0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x04, 0xe6,
     0xd6, 0xb4, 0x46, 0x02, 0x00, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00, 0x74,
     0x2f, 0xe5, 0xa3, 0x01, 0x00, 0x0d, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69,
     0x73, 0x20, 0x74, 0x65, 0x73, 0x74, 0x31, 0x0a, 0x00, 0x00, 0x00, 0xc6,
     0x2e, 0x8c, 0x6f, 0xc4, 0xd7, 0xbe, 0xd6, 0x00, 0x01, 0x26, 0x0e, 0x08,
     0x1b, 0xe0, 0x04, 0x1f, 0xb6, 0xf3, 0x7d, 0x01, 0x00, 0x00, 0x00, 0x00,
     0x04, 0x59, 0x5a, 0x00, 0x9f, 0x5e, 0xf0, 0x13, 0x7d, 0xf0, 0x7f, 0x7b,
     0x00, 0x01, 0x60, 0x48, 0x2e, 0x17, 0x7c, 0x3d, 0x1f, 0xb6, 0xf3, 0x7d,
     0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x59, 0x5a
   ],
   datalen: 14 // the data length of the uncompressed document
  },
];

function setupChannel(url) {
  var ios = Cc["@mozilla.org/network/io-service;1"].
            getService(Ci.nsIIOService);
  var chan = ios.newChannel("http://localhost:4444" + url, "", null);
  return chan;
}

function startIter() {
  var channel = setupChannel(tests[index].url);
  channel.asyncOpen(new ChannelListener(completeIter, channel, tests[index].flags), null);
}

function completeIter(request, data, ctx) {
  do_check_true(data.length == tests[index].datalen);
  if (++index < tests.length) {
	startIter();
  } else {
    httpserver.stop(do_test_finished);
  }
}

function run_test() {
  var prefserv = Cc["@mozilla.org/preferences-service;1"].
                 getService(Ci.nsIPrefService);
  var prefs = prefserv.getBranch("network.xz.");
  prefs.setBoolPref("enabled", true);
  prefs.setIntPref("memory_limit_mb", 32);
  httpserver.registerPathHandler("/test/cexz1", handler);
  httpserver.registerPathHandler("/test/cexz2", handler);
  httpserver.start(4444);

  startIter();
  do_test_pending();
}

function handler(metadata, response) {
  response.setStatusLine(metadata.httpVersion, 200, "OK");
  response.setHeader("Content-Type", "text/plain", false);
  response.setHeader("Content-Encoding", tests[index].ce, false);
  response.setHeader("Content-Length", "" + tests[index].body.length, false);

  var bos = Components.classes["@mozilla.org/binaryoutputstream;1"]
	.createInstance(Components.interfaces.nsIBinaryOutputStream);
  bos.setOutputStream(response.bodyOutputStream);

  response.processAsync();
  bos.writeByteArray(tests[index].body, tests[index].body.length);
  response.finish();
}
